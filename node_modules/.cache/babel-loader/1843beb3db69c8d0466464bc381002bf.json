{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, CHARACTERS_URL, COMICS_URL, MARVEL_API_KEY } from '../utils/constants';\nexport const getMoreCharacters = (offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffset(result.data.data.count));\n    dispatch(addMoreCharacters(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getMoreComics = (id = null, offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '/' + id + COMICS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffsetComics(result.data.data.count));\n    dispatch(updateComics({\n      comics: result.data.data.results,\n      iduri: parseInt(id)\n    }));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getDetailCharacter = (id = null) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '/' + id + '?apikey=' + MARVEL_API_KEY);\n    dispatch(updateDetailCharacters(result.data.data.results[0]));\n  } catch (error) {\n    return false;\n  }\n};\nconst charactersSlice = createSlice({\n  name: 'characters',\n  initialState: {\n    charactersList: [],\n    charactersComics: [],\n    charactersDetail: {\n      id: null,\n      name: null,\n      description: null,\n      comics: {\n        available: 0\n      },\n      stories: {\n        available: 0\n      }\n    },\n    offset: 0,\n    offset_comics: 0\n  },\n  reducers: {\n    updateCharacters(state, action) {\n      state.charactersList = action.payload;\n    },\n\n    updateDetailCharacters(state, action) {\n      state.charactersDetail = action.payload;\n    },\n\n    updateComics(state, action) {\n      const {\n        comics,\n        iduri\n      } = action.payload;\n\n      if (state.charactersDetail.id !== iduri) {\n        state.charactersComics = [];\n      }\n\n      state.charactersComics = [...state.charactersComics, ...comics];\n    },\n\n    addMoreCharacters(state, action) {\n      state.charactersList = [...state.charactersList, ...action.payload];\n    },\n\n    setOffset(state, action) {\n      state.offset += action.payload;\n    },\n\n    setOffsetComics(state, action) {\n      state.offset_comics += action.payload;\n    }\n\n  }\n});\nexport const {\n  updateCharacters,\n  setOffset,\n  setOffsetComics,\n  addMoreCharacters,\n  updateDetailCharacters,\n  updateComics\n} = charactersSlice.actions;\nexport default charactersSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/charactersSlice.js"],"names":["createSlice","axios","MARVEL_API","CHARACTERS_URL","COMICS_URL","MARVEL_API_KEY","getMoreCharacters","offset","dispatch","result","get","setOffset","data","count","addMoreCharacters","results","error","getMoreComics","id","setOffsetComics","updateComics","comics","iduri","parseInt","getDetailCharacter","updateDetailCharacters","charactersSlice","name","initialState","charactersList","charactersComics","charactersDetail","description","available","stories","offset_comics","reducers","updateCharacters","state","action","payload","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, CHARACTERS_URL, COMICS_URL, MARVEL_API_KEY } from '../utils/constants';\n\nexport const getMoreCharacters = (offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffset(result.data.data.count));\n        dispatch(addMoreCharacters(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getMoreComics = (id = null, offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'/'+id+COMICS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffsetComics(result.data.data.count));\n        dispatch(updateComics({\n            comics: result.data.data.results, \n            iduri: parseInt(id)\n        }));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getDetailCharacter = (id = null) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'/'+id+'?apikey='+MARVEL_API_KEY);\n        dispatch(updateDetailCharacters(result.data.data.results[0]));\n    } catch (error) {\n        return false;\n    }\n}\n\nconst charactersSlice = createSlice({\n    name: 'characters',\n    initialState: {\n        charactersList: [],\n        charactersComics: [],\n        charactersDetail: {\n            id: null,\n            name: null,\n            description: null,\n            comics: {\n                available: 0\n            },\n            stories: {\n                available: 0\n            }\n        },\n        offset: 0,\n        offset_comics: 0\n    },\n    reducers: {\n        updateCharacters(state, action) {\n            state.charactersList = action.payload;\n        },\n        updateDetailCharacters(state, action) {\n            state.charactersDetail = action.payload;\n        },\n        updateComics(state, action) {\n            const {comics, iduri} = action.payload;\n            if(state.charactersDetail.id !== iduri){\n                state.charactersComics = [];  \n            }\n            state.charactersComics = [...state.charactersComics, ...comics];\n        },\n        addMoreCharacters(state, action) {\n            state.charactersList = [...state.charactersList, ...action.payload];\n        },\n        setOffset(state, action) {\n            state.offset += action.payload;\n        },\n        setOffsetComics(state, action) {\n            state.offset_comics += action.payload;\n        }\n    },\n})\nexport const { updateCharacters, setOffset, setOffsetComics, addMoreCharacters, updateDetailCharacters, updateComics } = charactersSlice.actions\nexport default charactersSlice.reducer"]},"metadata":{},"sourceType":"module"}