{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, COMICS_URL, MARVEL_API_KEY, CHARACTERS_URL, STORIES_URL } from '../utils/constants';\nexport const getMoreComics = (offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffset(result.data.data.count));\n    dispatch(addMoreComics(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getDetailComics = (id = null) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '/' + id + '?apikey=' + MARVEL_API_KEY);\n    dispatch(updateDetailComics(result.data.data.results[0]));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getMoreCharacters = (id = null, offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '/' + id + CHARACTERS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffsetCharacters(result.data.data.count));\n    dispatch(updateCharacters(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getMoreStories = (id = null, offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '/' + id + STORIES_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffsetStories(result.data.data.count));\n    dispatch(updateStories(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nconst comicsSlice = createSlice({\n  name: 'comics',\n  initialState: {\n    comicsList: [],\n    characters: [],\n    stories: [],\n    offset: 0,\n    offset_characters: 0,\n    offset_stories: 0,\n    comicsDetail: {\n      id: null,\n      title: null,\n      description: null,\n      characters: {\n        available: 0\n      },\n      stories: {\n        available: 0\n      }\n    }\n  },\n  reducers: {\n    updateComics(state, action) {\n      state.comicsList = action.payload;\n    },\n\n    addMoreComics(state, action) {\n      state.comicsList = [...state.comicsList, ...action.payload];\n    },\n\n    setOffset(state, action) {\n      state.offset += action.payload;\n    },\n\n    updateDetailComics(state, action) {\n      state.comicsDetail = action.payload;\n    },\n\n    setOffsetCharacters(state, action) {\n      state.offset_characters += action.payload;\n    },\n\n    setOffsetStories(state, action) {\n      state.offset_stories += action.payload;\n    },\n\n    updateEmpty(state) {\n      state.offset_characters = 0;\n      state.characters = [];\n      state.offset_stories = 0;\n      state.stories = [];\n    },\n\n    updateCharacters(state, action) {\n      state.characters = [...state.characters, ...action.payload];\n    },\n\n    updateStories(state, action) {\n      state.stories = [...state.stories, ...action.payload];\n    }\n\n  }\n});\nexport const {\n  updateComics,\n  addMoreComics,\n  setOffset,\n  updateDetailComics,\n  setOffsetCharacters,\n  setOffsetStories,\n  updateEmpty,\n  updateCharacters,\n  updateStories\n} = comicsSlice.actions;\nexport default comicsSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/comicsSlice.js"],"names":["createSlice","axios","MARVEL_API","COMICS_URL","MARVEL_API_KEY","CHARACTERS_URL","STORIES_URL","getMoreComics","offset","dispatch","result","get","setOffset","data","count","addMoreComics","results","error","getDetailComics","id","updateDetailComics","getMoreCharacters","setOffsetCharacters","updateCharacters","getMoreStories","setOffsetStories","updateStories","comicsSlice","name","initialState","comicsList","characters","stories","offset_characters","offset_stories","comicsDetail","title","description","available","reducers","updateComics","state","action","payload","updateEmpty","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,cAAjC,EAAiDC,cAAjD,EAAiEC,WAAjE,QAAoF,oBAApF;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,MAAM,GAAG,CAAV,KAAgB,MAAOC,QAAP,IAAoB;AAC7D,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUT,UAAU,GAACC,UAAX,GAAsB,UAAtB,GAAiCK,MAAjC,GAAwC,UAAxC,GAAmDJ,cAA7D,CAArB;AACAK,IAAAA,QAAQ,CAACG,SAAS,CAACF,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBC,KAAlB,CAAV,CAAR;AACAL,IAAAA,QAAQ,CAACM,aAAa,CAACL,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBG,OAAlB,CAAd,CAAR;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CARM;AASP,OAAO,MAAMC,eAAe,GAAG,CAACC,EAAE,GAAG,IAAN,KAAe,MAAOV,QAAP,IAAoB;AAC9D,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUT,UAAU,GAACC,UAAX,GAAsB,GAAtB,GAA0BgB,EAA1B,GAA6B,UAA7B,GAAwCf,cAAlD,CAArB;AACAK,IAAAA,QAAQ,CAACW,kBAAkB,CAACV,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBG,OAAjB,CAAyB,CAAzB,CAAD,CAAnB,CAAR;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CAPM;AASP,OAAO,MAAMI,iBAAiB,GAAG,CAACF,EAAE,GAAG,IAAN,EAAYX,MAAM,GAAG,CAArB,KAA2B,MAAOC,QAAP,IAAoB;AAC5E,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUT,UAAU,GAACC,UAAX,GAAsB,GAAtB,GAA0BgB,EAA1B,GAA6Bd,cAA7B,GAA4C,UAA5C,GAAuDG,MAAvD,GAA8D,UAA9D,GAAyEJ,cAAnF,CAArB;AACAK,IAAAA,QAAQ,CAACa,mBAAmB,CAACZ,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBC,KAAlB,CAApB,CAAR;AACAL,IAAAA,QAAQ,CAACc,gBAAgB,CAACb,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBG,OAAlB,CAAjB,CAAR;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CARM;AAUP,OAAO,MAAMO,cAAc,GAAG,CAACL,EAAE,GAAG,IAAN,EAAYX,MAAM,GAAG,CAArB,KAA2B,MAAOC,QAAP,IAAoB;AACzE,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUT,UAAU,GAACC,UAAX,GAAsB,GAAtB,GAA0BgB,EAA1B,GAA6Bb,WAA7B,GAAyC,UAAzC,GAAoDE,MAApD,GAA2D,UAA3D,GAAsEJ,cAAhF,CAArB;AACAK,IAAAA,QAAQ,CAACgB,gBAAgB,CAACf,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBC,KAAlB,CAAjB,CAAR;AACAL,IAAAA,QAAQ,CAACiB,aAAa,CAAChB,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBG,OAAlB,CAAd,CAAR;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CARM;AAWP,MAAMU,WAAW,GAAG3B,WAAW,CAAC;AAC5B4B,EAAAA,IAAI,EAAE,QADsB;AAE5BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE,EADF;AAEVC,IAAAA,UAAU,EAAE,EAFF;AAGVC,IAAAA,OAAO,EAAE,EAHC;AAIVxB,IAAAA,MAAM,EAAE,CAJE;AAKVyB,IAAAA,iBAAiB,EAAE,CALT;AAMVC,IAAAA,cAAc,EAAE,CANN;AAOVC,IAAAA,YAAY,EAAE;AACVhB,MAAAA,EAAE,EAAE,IADM;AAEViB,MAAAA,KAAK,EAAE,IAFG;AAGVC,MAAAA,WAAW,EAAE,IAHH;AAIVN,MAAAA,UAAU,EAAE;AACRO,QAAAA,SAAS,EAAE;AADH,OAJF;AAOVN,MAAAA,OAAO,EAAE;AACLM,QAAAA,SAAS,EAAE;AADN;AAPC;AAPJ,GAFc;AAqB5BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACX,UAAN,GAAmBY,MAAM,CAACC,OAA1B;AACH,KAHK;;AAIN5B,IAAAA,aAAa,CAAC0B,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACX,UAAN,GAAmB,CAAC,GAAGW,KAAK,CAACX,UAAV,EAAsB,GAAGY,MAAM,CAACC,OAAhC,CAAnB;AACH,KANK;;AAON/B,IAAAA,SAAS,CAAC6B,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACjC,MAAN,IAAgBkC,MAAM,CAACC,OAAvB;AACH,KATK;;AAUNvB,IAAAA,kBAAkB,CAACqB,KAAD,EAAQC,MAAR,EAAgB;AAC9BD,MAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACC,OAA5B;AACH,KAZK;;AAaNrB,IAAAA,mBAAmB,CAACmB,KAAD,EAAQC,MAAR,EAAgB;AAC/BD,MAAAA,KAAK,CAACR,iBAAN,IAA2BS,MAAM,CAACC,OAAlC;AACH,KAfK;;AAgBNlB,IAAAA,gBAAgB,CAACgB,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACP,cAAN,IAAwBQ,MAAM,CAACC,OAA/B;AACH,KAlBK;;AAmBNC,IAAAA,WAAW,CAACH,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACR,iBAAN,GAA0B,CAA1B;AACAQ,MAAAA,KAAK,CAACV,UAAN,GAAmB,EAAnB;AACAU,MAAAA,KAAK,CAACP,cAAN,GAAuB,CAAvB;AACAO,MAAAA,KAAK,CAACT,OAAN,GAAgB,EAAhB;AACH,KAxBK;;AAyBNT,IAAAA,gBAAgB,CAACkB,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACV,UAAN,GAAmB,CAAC,GAAGU,KAAK,CAACV,UAAV,EAAsB,GAAGW,MAAM,CAACC,OAAhC,CAAnB;AACH,KA3BK;;AA4BNjB,IAAAA,aAAa,CAACe,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACT,OAAN,GAAgB,CAAC,GAAGS,KAAK,CAACT,OAAV,EAAmB,GAAGU,MAAM,CAACC,OAA7B,CAAhB;AACH;;AA9BK;AArBkB,CAAD,CAA/B;AAsDA,OAAO,MAAM;AACTH,EAAAA,YADS;AAETzB,EAAAA,aAFS;AAGTH,EAAAA,SAHS;AAITQ,EAAAA,kBAJS;AAKTE,EAAAA,mBALS;AAMTG,EAAAA,gBANS;AAOTmB,EAAAA,WAPS;AAQTrB,EAAAA,gBARS;AASTG,EAAAA;AATS,IASSC,WAAW,CAACkB,OAT3B;AAUP,eAAelB,WAAW,CAACmB,OAA3B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, COMICS_URL, MARVEL_API_KEY, CHARACTERS_URL, STORIES_URL } from '../utils/constants';\n\nexport const getMoreComics = (offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffset(result.data.data.count));\n        dispatch(addMoreComics(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getDetailComics = (id = null) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'/'+id+'?apikey='+MARVEL_API_KEY);\n        dispatch(updateDetailComics(result.data.data.results[0]));\n    } catch (error) {\n        return false;\n    }\n}\n\nexport const getMoreCharacters = (id = null, offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'/'+id+CHARACTERS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffsetCharacters(result.data.data.count));\n        dispatch(updateCharacters(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\n\nexport const getMoreStories = (id = null, offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'/'+id+STORIES_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffsetStories(result.data.data.count));\n        dispatch(updateStories(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\n\n\nconst comicsSlice = createSlice({\n    name: 'comics',\n    initialState: {\n        comicsList: [],\n        characters: [],\n        stories: [],\n        offset: 0,\n        offset_characters: 0,\n        offset_stories: 0,\n        comicsDetail: {\n            id: null,\n            title: null,\n            description: null,\n            characters: {\n                available: 0\n            },\n            stories: {\n                available: 0\n            }\n        },\n    },\n    reducers: {\n        updateComics(state, action) {\n            state.comicsList = action.payload;\n        },\n        addMoreComics(state, action) {\n            state.comicsList = [...state.comicsList, ...action.payload];\n        },\n        setOffset(state, action) {\n            state.offset += action.payload;\n        },\n        updateDetailComics(state, action) {\n            state.comicsDetail = action.payload;\n        },\n        setOffsetCharacters(state, action) {\n            state.offset_characters += action.payload;\n        },\n        setOffsetStories(state, action) {\n            state.offset_stories += action.payload;\n        },\n        updateEmpty(state) {\n            state.offset_characters = 0;\n            state.characters = [];\n            state.offset_stories = 0;\n            state.stories = [];\n        },\n        updateCharacters(state, action) {\n            state.characters = [...state.characters, ...action.payload];\n        },\n        updateStories(state, action) {\n            state.stories = [...state.stories, ...action.payload];\n        },\n    },\n})\nexport const { \n    updateComics, \n    addMoreComics, \n    setOffset, \n    updateDetailComics, \n    setOffsetCharacters,\n    setOffsetStories,\n    updateEmpty,\n    updateCharacters,\n    updateStories } = comicsSlice.actions\nexport default comicsSlice.reducer"]},"metadata":{},"sourceType":"module"}