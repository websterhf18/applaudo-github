{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, COMICS_URL, MARVEL_API_KEY } from '../utils/constants';\nexport const getMoreComics = (offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffset(result.data.data.count));\n    dispatch(addMoreComics(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getDetailComics = (id = null) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '/' + id + '?apikey=' + MARVEL_API_KEY);\n    dispatch(updateDetailComics(result.data.data.results[0]));\n  } catch (error) {\n    return false;\n  }\n};\nconst comicsSlice = createSlice({\n  name: 'comics',\n  initialState: {\n    comicsList: [],\n    characters: [],\n    stories: [],\n    offset: 0,\n    offset_characters: 0,\n    offset_stories: 0,\n    comicsDetail: {\n      id: null,\n      title: null,\n      description: null,\n      characters: {\n        available: 0\n      },\n      stories: {\n        available: 0\n      }\n    }\n  },\n  reducers: {\n    updateComics(state, action) {\n      state.comicsList = action.payload;\n    },\n\n    addMoreComics(state, action) {\n      state.comicsList = [...state.comicsList, ...action.payload];\n    },\n\n    setOffset(state, action) {\n      state.offset += action.payload;\n    },\n\n    updateDetailComics(state, action) {\n      state.comicsDetail = action.payload;\n    },\n\n    setOffsetCharacters(state, action) {\n      state.offset_characters += action.payload;\n    },\n\n    setOffsetStories(state, action) {\n      state.offset_stories += action.payload;\n    },\n\n    updateEmpty(state) {\n      state.offset_characters = 0;\n      state.charactersComics = [];\n      state.offset_stories = 0;\n      state.charactersStories = [];\n    },\n\n    updateComics(state, action) {\n      state.charactersComics = [...state.charactersComics, ...action.payload];\n    },\n\n    updateStories(state, action) {\n      state.charactersStories = [...state.charactersStories, ...action.payload];\n    }\n\n  }\n});\nexport const {\n  updateComics,\n  addMoreComics,\n  setOffset,\n  updateDetailComics\n} = comicsSlice.actions;\nexport default comicsSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/comicsSlice.js"],"names":["createSlice","axios","MARVEL_API","COMICS_URL","MARVEL_API_KEY","getMoreComics","offset","dispatch","result","get","setOffset","data","count","addMoreComics","results","error","getDetailComics","id","updateDetailComics","comicsSlice","name","initialState","comicsList","characters","stories","offset_characters","offset_stories","comicsDetail","title","description","available","reducers","updateComics","state","action","payload","setOffsetCharacters","setOffsetStories","updateEmpty","charactersComics","charactersStories","updateStories","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, COMICS_URL, MARVEL_API_KEY } from '../utils/constants';\n\nexport const getMoreComics = (offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffset(result.data.data.count));\n        dispatch(addMoreComics(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getDetailComics = (id = null) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'/'+id+'?apikey='+MARVEL_API_KEY);\n        dispatch(updateDetailComics(result.data.data.results[0]));\n    } catch (error) {\n        return false;\n    }\n}\n\n\nconst comicsSlice = createSlice({\n    name: 'comics',\n    initialState: {\n        comicsList: [],\n        characters: [],\n        stories: [],\n        offset: 0,\n        offset_characters: 0,\n        offset_stories: 0,\n        comicsDetail: {\n            id: null,\n            title: null,\n            description: null,\n            characters: {\n                available: 0\n            },\n            stories: {\n                available: 0\n            }\n        },\n    },\n    reducers: {\n        updateComics(state, action) {\n            state.comicsList = action.payload;\n        },\n        addMoreComics(state, action) {\n            state.comicsList = [...state.comicsList, ...action.payload];\n        },\n        setOffset(state, action) {\n            state.offset += action.payload;\n        },\n        updateDetailComics(state, action) {\n            state.comicsDetail = action.payload;\n        },\n        setOffsetCharacters(state, action) {\n            state.offset_characters += action.payload;\n        },\n        setOffsetStories(state, action) {\n            state.offset_stories += action.payload;\n        },\n        updateEmpty(state) {\n            state.offset_characters = 0;\n            state.charactersComics = [];\n            state.offset_stories = 0;\n            state.charactersStories = [];\n        },\n        updateComics(state, action) {\n            state.charactersComics = [...state.charactersComics, ...action.payload];\n        },\n        updateStories(state, action) {\n            state.charactersStories = [...state.charactersStories, ...action.payload];\n        },\n    },\n})\nexport const { updateComics, addMoreComics, setOffset, updateDetailComics } = comicsSlice.actions\nexport default comicsSlice.reducer"]},"metadata":{},"sourceType":"module"}