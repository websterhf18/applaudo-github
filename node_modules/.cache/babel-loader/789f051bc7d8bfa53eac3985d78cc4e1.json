{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, CHARACTERS_URL, MARVEL_API_KEY } from '../utils/constants';\nexport const getMoreCharacters = (offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffset(result.data.data.count));\n    dispatch(addMoreCharacters(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getDetailComics = () => async () => {\n  try {//const result = await axios.get(MARVEL_API+CHARACTERS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n    //dispatch(setOffset(result.data.data.count));\n    //dispatch(addMoreCharacters(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nconst charactersSlice = createSlice({\n  name: 'characters',\n  initialState: {\n    charactersList: [],\n    charactersComics: {},\n    offset: 0\n  },\n  reducers: {\n    updateCharacters(state, action) {\n      state.charactersList = action.payload;\n    },\n\n    addMoreCharacters(state, action) {\n      state.charactersList = [...state.charactersList, ...action.payload];\n    },\n\n    setOffset(state, action) {\n      state.offset += action.payload;\n    }\n\n  }\n});\nexport const {\n  updateCharacters,\n  setOffset,\n  addMoreCharacters\n} = charactersSlice.actions;\nexport default charactersSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/charactersSlice.js"],"names":["createSlice","axios","MARVEL_API","CHARACTERS_URL","MARVEL_API_KEY","getMoreCharacters","offset","dispatch","result","get","setOffset","data","count","addMoreCharacters","results","error","getDetailComics","charactersSlice","name","initialState","charactersList","charactersComics","reducers","updateCharacters","state","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,cAArC,QAA2D,oBAA3D;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,MAAM,GAAG,CAAV,KAAgB,MAAOC,QAAP,IAAoB;AACjE,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUP,UAAU,GAACC,cAAX,GAA0B,UAA1B,GAAqCG,MAArC,GAA4C,UAA5C,GAAuDF,cAAjE,CAArB;AACAG,IAAAA,QAAQ,CAACG,SAAS,CAACF,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBC,KAAlB,CAAV,CAAR;AACAL,IAAAA,QAAQ,CAACM,iBAAiB,CAACL,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBG,OAAlB,CAAlB,CAAR;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CARM;AASP,OAAO,MAAMC,eAAe,GAAG,MAAM,YAAY;AAC7C,MAAI,CACA;AACA;AACA;AACH,GAJD,CAIE,OAAOD,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CARM;AAUP,MAAME,eAAe,GAAGjB,WAAW,CAAC;AAChCkB,EAAAA,IAAI,EAAE,YAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,cAAc,EAAE,EADN;AAEVC,IAAAA,gBAAgB,EAAE,EAFR;AAGVf,IAAAA,MAAM,EAAE;AAHE,GAFkB;AAOhCgB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACJ,cAAN,GAAuBK,MAAM,CAACC,OAA9B;AACH,KAHK;;AAINb,IAAAA,iBAAiB,CAACW,KAAD,EAAQC,MAAR,EAAgB;AAC7BD,MAAAA,KAAK,CAACJ,cAAN,GAAuB,CAAC,GAAGI,KAAK,CAACJ,cAAV,EAA0B,GAAGK,MAAM,CAACC,OAApC,CAAvB;AACH,KANK;;AAONhB,IAAAA,SAAS,CAACc,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAAClB,MAAN,IAAgBmB,MAAM,CAACC,OAAvB;AACH;;AATK;AAPsB,CAAD,CAAnC;AAmBA,OAAO,MAAM;AAAEH,EAAAA,gBAAF;AAAoBb,EAAAA,SAApB;AAA+BG,EAAAA;AAA/B,IAAqDI,eAAe,CAACU,OAA3E;AACP,eAAeV,eAAe,CAACW,OAA/B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, CHARACTERS_URL, MARVEL_API_KEY } from '../utils/constants';\n\nexport const getMoreCharacters = (offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffset(result.data.data.count));\n        dispatch(addMoreCharacters(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getDetailComics = () => async () => {\n    try {\n        //const result = await axios.get(MARVEL_API+CHARACTERS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        //dispatch(setOffset(result.data.data.count));\n        //dispatch(addMoreCharacters(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\n\nconst charactersSlice = createSlice({\n    name: 'characters',\n    initialState: {\n        charactersList: [],\n        charactersComics: {},\n        offset: 0\n    },\n    reducers: {\n        updateCharacters(state, action) {\n            state.charactersList = action.payload;\n        },\n        addMoreCharacters(state, action) {\n            state.charactersList = [...state.charactersList, ...action.payload];\n        },\n        setOffset(state, action) {\n            state.offset += action.payload;\n        }\n    },\n})\nexport const { updateCharacters, setOffset, addMoreCharacters } = charactersSlice.actions\nexport default charactersSlice.reducer"]},"metadata":{},"sourceType":"module"}