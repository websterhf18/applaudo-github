{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, STORIES_URL, MARVEL_API_KEY } from '../utils/constants';\nexport const getStories = () => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + STORIES_URL + '?apikey=' + MARVEL_API_KEY);\n    dispatch(updateStories(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nconst storiesSlice = createSlice({\n  name: 'stories',\n  initialState: {\n    storiesList: []\n  },\n  reducers: {\n    updateStories(state, action) {\n      state.storiesList = action.payload;\n    }\n\n  }\n});\nexport const {\n  updateStories\n} = storiesSlice.actions;\nexport default storiesSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/storiesSlice.js"],"names":["createSlice","axios","MARVEL_API","STORIES_URL","MARVEL_API_KEY","getStories","dispatch","result","get","updateStories","data","results","error","storiesSlice","name","initialState","storiesList","reducers","state","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,cAAlC,QAAwD,oBAAxD;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,UAAU,GAACC,WAAX,GAAuB,UAAvB,GAAkCC,cAA5C,CAArB;AACAE,IAAAA,QAAQ,CAACG,aAAa,CAACF,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBC,OAAlB,CAAd,CAAR;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CAPM;AASP,MAAMC,YAAY,GAAGb,WAAW,CAAC;AAC7Bc,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,WAAW,EAAE;AADH,GAFe;AAK7BC,EAAAA,QAAQ,EAAE;AACNR,IAAAA,aAAa,CAACS,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACC,OAA3B;AACH;;AAHK;AALmB,CAAD,CAAhC;AAWA,OAAO,MAAM;AAAEX,EAAAA;AAAF,IAAoBI,YAAY,CAACQ,OAAvC;AACP,eAAeR,YAAY,CAACS,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, STORIES_URL, MARVEL_API_KEY } from '../utils/constants';\n\nexport const getStories = () => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+STORIES_URL+'?apikey='+MARVEL_API_KEY);\n        dispatch(updateStories(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\n\nconst storiesSlice = createSlice({\n    name: 'stories',\n    initialState: {\n        storiesList: [] \n    },\n    reducers: {\n        updateStories(state, action) {\n            state.storiesList = action.payload;\n        },\n    },\n})\nexport const { updateStories } = storiesSlice.actions\nexport default storiesSlice.reducer"]},"metadata":{},"sourceType":"module"}