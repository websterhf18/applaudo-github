{"ast":null,"code":"var _jsxFileName = \"/Users/Mac/Desktop/applaudo-test/src/components/ListComponent.js\";\nimport React from 'react';\nimport { FixedSizeList } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { Card, Button, Row } from 'react-bootstrap';\nimport { HeartFill } from 'react-bootstrap-icons';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListComponent = ({\n  items,\n  moreItemsLoading,\n  loadMore,\n  hasNextPage,\n  listType\n}) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight; //Functions to build grid\n\n  const ITEM_WIDTH = 420;\n  const ITEM_HEIGHT = 550;\n\n  const generateIndexesForRow = (rowIndex, maxItemsPerRow, itemsAmount) => {\n    const result = [];\n    const startIndex = rowIndex * maxItemsPerRow;\n\n    for (let i = startIndex; i < Math.min(startIndex + maxItemsPerRow, itemsAmount); i++) {\n      result.push(i);\n    }\n\n    return result;\n  };\n\n  const getMaxItemsAmountPerRow = width => {\n    return 3;\n  };\n\n  const getRowsAmount = (width, itemsAmount, hasMore) => {\n    const maxItemsPerRow = getMaxItemsAmountPerRow(width);\n    return Math.ceil(itemsAmount / maxItemsPerRow) + (hasMore ? 1 : 0);\n  };\n\n  const itemCount = getRowsAmount(width, items.length, hasNextPage); //\n\n  const rowRenderer = ({\n    index,\n    style\n  }) => {\n    const maxItemsPerRow = getMaxItemsAmountPerRow(width);\n    const itemsIDs = generateIndexesForRow(index, maxItemsPerRow, items.length).map(itemIndex => items[itemIndex]);\n    return /*#__PURE__*/_jsxDEV(Row, {\n      style: { ...style,\n        padding: '20px 0px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          margin: '0 auto'\n        },\n        children: itemsIDs.map(itemID => {\n          let imageuri;\n\n          if (itemID.thumbnail) {\n            var {\n              extension,\n              path\n            } = itemID.thumbnail;\n            imageuri = path + '/landscape_xlarge.' + extension;\n          }\n\n          return /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              width: '18rem',\n              margin: '0px 15px',\n              height: ITEM_HEIGHT - 20\n            },\n            children: [listType !== 'stories' ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: imageuri\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 37\n            }, this) : null, listType !== 'stories' ? /*#__PURE__*/_jsxDEV(Card.ImgOverlay, {\n              children: /*#__PURE__*/_jsxDEV(Card.Title, {\n                className: \"text-right\",\n                children: /*#__PURE__*/_jsxDEV(HeartFill, {\n                  color: \"royalblue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 37\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: listType == 'comics' || listType == 'stories' ? itemID.title : itemID.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                style: {\n                  maxHeight: 100,\n                  overflow: 'hidden'\n                },\n                children: itemID.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this), listType == 'characters' ? /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: `/characters/comics/${itemID.id}`,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"m-2\",\n                  variant: \"primary\",\n                  children: \"Comics\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"m-2\",\n                variant: \"primary\",\n                children: \"Stories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this) : null, listType == 'comics' ? /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"m-2\",\n                variant: \"primary\",\n                children: \"Characters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"m-2\",\n                variant: \"primary\",\n                children: \"Stories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this) : null, listType == 'stories' ? /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"m-2\",\n                variant: \"primary\",\n                children: \"Characters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"m-2\",\n                variant: \"primary\",\n                children: \"Comics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this) : null]\n          }, itemID.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(InfiniteLoader, {\n    isItemLoaded: ({\n      index\n    }) => {\n      const maxItemsPerRow = getMaxItemsAmountPerRow(width);\n      const allItemsLoaded = generateIndexesForRow(index, maxItemsPerRow, items.length).length > 0;\n      return !hasNextPage || allItemsLoaded;\n    },\n    itemCount: itemCount,\n    loadMoreItems: loadMore,\n    children: ({\n      onItemsRendered,\n      ref\n    }) => /*#__PURE__*/_jsxDEV(FixedSizeList, {\n      ref: ref,\n      height: height,\n      width: width,\n      itemCount: itemCount,\n      itemSize: ITEM_HEIGHT,\n      onItemsRendered: onItemsRendered,\n      children: rowRenderer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ListComponent;\nexport default ListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListComponent\");","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/components/ListComponent.js"],"names":["React","FixedSizeList","InfiniteLoader","Card","Button","Row","HeartFill","Link","ListComponent","items","moreItemsLoading","loadMore","hasNextPage","listType","width","window","innerWidth","height","innerHeight","ITEM_WIDTH","ITEM_HEIGHT","generateIndexesForRow","rowIndex","maxItemsPerRow","itemsAmount","result","startIndex","i","Math","min","push","getMaxItemsAmountPerRow","getRowsAmount","hasMore","ceil","itemCount","length","rowRenderer","index","style","itemsIDs","map","itemIndex","padding","display","margin","itemID","imageuri","thumbnail","extension","path","title","name","maxHeight","overflow","description","id","allItemsLoaded","onItemsRendered","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FixedSizeList } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { Card, Button, Row } from 'react-bootstrap';\nimport { HeartFill } from 'react-bootstrap-icons';\nimport { Link } from \"react-router-dom\";\n\nconst ListComponent = ({ items, moreItemsLoading, loadMore, hasNextPage, listType }) => {\n    \n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    //Functions to build grid\n    const ITEM_WIDTH = 420;\n    const ITEM_HEIGHT = 550;\n    const generateIndexesForRow = (rowIndex, maxItemsPerRow, itemsAmount) => {\n        const result = [];\n        const startIndex = rowIndex * maxItemsPerRow;\n        for (let i = startIndex; i < Math.min(startIndex + maxItemsPerRow, itemsAmount); i++) {\n            result.push(i);\n        }\n        return result;\n    }\n    const getMaxItemsAmountPerRow = (width) => {\n        return 3;\n    }\n    const getRowsAmount = (width, itemsAmount, hasMore) => {\n        const maxItemsPerRow = getMaxItemsAmountPerRow(width);\n        return Math.ceil(itemsAmount/ maxItemsPerRow) + (hasMore ? 1 : 0);\n    }\n    const itemCount = getRowsAmount(width, items.length, hasNextPage);\n    //\n    const rowRenderer = ({index, style}) => {\n        const maxItemsPerRow = getMaxItemsAmountPerRow(width);\n        const itemsIDs = generateIndexesForRow(index, maxItemsPerRow, items.length).map(itemIndex => items[itemIndex]);\n        return (\n            <Row style={{...style, padding: '20px 0px'}} >\n                <div style={{\n                    display: 'flex',\n                    margin: '0 auto'\n                }}>\n                    {itemsIDs.map(itemID => {\n                        let imageuri;\n                        if(itemID.thumbnail){\n                            var {extension, path} = itemID.thumbnail;\n                            imageuri = path+'/landscape_xlarge.'+extension;\n                        }\n                        return (\n                            <Card \n                            key={itemID.id}\n                            style={{ \n                                width: '18rem',\n                                margin: '0px 15px',\n                                height: ITEM_HEIGHT - 20\n                            }}>\n                                {listType !== 'stories' ? \n                                    <Card.Img variant=\"top\" src={imageuri} />\n                                : null}\n                                {listType !== 'stories' ? \n                                    <Card.ImgOverlay>\n                                        <Card.Title\n                                        className=\"text-right\">\n                                            <HeartFill color=\"royalblue\" />\n                                        </Card.Title>\n                                    </Card.ImgOverlay>\n                                : null}\n                                <Card.Body>\n                                    <Card.Title>{listType == 'comics' ||  listType == 'stories' ? itemID.title : itemID.name}</Card.Title>\n                                    <Card.Text style={{\n                                        maxHeight: 100,\n                                        overflow: 'hidden'\n                                    }}>\n                                    {itemID.description}\n                                    </Card.Text>\n                                </Card.Body>\n                                {listType == 'characters' ?\n                                <Card.Body>\n                                        <Link to={`/characters/comics/${itemID.id}`}>\n                                            <Button                                         \n                                            className=\"m-2\"\n                                            variant=\"primary\">Comics</Button>\n                                        </Link>\n                                        <Button \n                                        className=\"m-2\"\n                                        variant=\"primary\">Stories</Button>\n                                </Card.Body>\n                                : null}\n                                {listType == 'comics' ?\n                                <Card.Body>\n                                        <Button \n                                        className=\"m-2\"\n                                        variant=\"primary\">Characters</Button>\n                                        <Button \n                                        className=\"m-2\"\n                                        variant=\"primary\">Stories</Button>\n                                </Card.Body>\n                                : null}\n                                {listType == 'stories' ?\n                                <Card.Body>\n                                        <Button \n                                        className=\"m-2\"\n                                        variant=\"primary\">Characters</Button>\n                                        <Button \n                                        className=\"m-2\"\n                                        variant=\"primary\">Comics</Button>\n                                </Card.Body>\n                                : null}\n                            </Card>\n                        )}\n                    )}\n                </div>\n            </Row>\n        )\n    };\n    return (\n        <InfiniteLoader\n            isItemLoaded={({index}) => {\n                const maxItemsPerRow = getMaxItemsAmountPerRow(width);\n                const allItemsLoaded = generateIndexesForRow(index, maxItemsPerRow, items.length).length > 0;\n                return !hasNextPage || allItemsLoaded;\n            }}\n            itemCount={itemCount}\n            loadMoreItems={loadMore}\n        >\n            {({ onItemsRendered, ref }) => (\n                <FixedSizeList\n                ref={ref}\n                height={height}\n                width={width}\n                itemCount={itemCount}\n                itemSize={ITEM_HEIGHT}\n                onItemsRendered={onItemsRendered}\n                >\n                    {rowRenderer}\n                </FixedSizeList>\n            )}\n        </InfiniteLoader>\n    )\n};\n\nexport default ListComponent;"]},"metadata":{},"sourceType":"module"}