{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, CHARACTERS_URL, COMICS_URL, STORIES_URL, MARVEL_API_KEY } from '../utils/constants';\nexport const getMoreCharacters = (offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffset(result.data.data.count));\n    dispatch(addMoreCharacters(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getMoreComics = (id = null, offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '/' + id + COMICS_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffsetComics(result.data.data.count));\n    dispatch(updateComics(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getMoreStories = (id = null, offset = 0) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '/' + id + STORIES_URL + '?offset=' + offset + '&apikey=' + MARVEL_API_KEY);\n    dispatch(setOffsetStories(result.data.data.count));\n    dispatch(updateStories(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nexport const getDetailCharacter = (id = null) => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + CHARACTERS_URL + '/' + id + '?apikey=' + MARVEL_API_KEY);\n    dispatch(updateDetailCharacters(result.data.data.results[0]));\n  } catch (error) {\n    return false;\n  }\n};\nconst charactersSlice = createSlice({\n  name: 'characters',\n  initialState: {\n    charactersList: [],\n    charactersComics: [],\n    charactersStories: [],\n    charactersDetail: {\n      id: null,\n      name: null,\n      description: null,\n      comics: {\n        available: 0\n      },\n      stories: {\n        available: 0\n      }\n    },\n    offset: 0,\n    offset_comics: 0,\n    offset_stories: 0\n  },\n  reducers: {\n    updateCharacters(state, action) {\n      state.charactersList = action.payload;\n    },\n\n    updateDetailCharacters(state, action) {\n      state.charactersDetail = action.payload;\n    },\n\n    updateEmpty(state, action) {\n      state.offset_comics = 0;\n      state.charactersComics = [];\n    },\n\n    updateComics(state, action) {\n      state.charactersComics = [...state.charactersComics, ...action.payload];\n    },\n\n    updateStories(state, action) {\n      state.charactersStories = [...state.charactersStories, ...action.payload];\n    },\n\n    addMoreCharacters(state, action) {\n      state.charactersList = [...state.charactersList, ...action.payload];\n    },\n\n    setOffset(state, action) {\n      state.offset += action.payload;\n    },\n\n    setOffsetComics(state, action) {\n      state.offset_comics += action.payload;\n    },\n\n    setOffsetStories(state, action) {\n      state.offset_stories += action.payload;\n    }\n\n  }\n});\nexport const {\n  updateCharacters,\n  setOffset,\n  setOffsetComics,\n  addMoreCharacters,\n  updateDetailCharacters,\n  updateComics,\n  updateEmpty,\n  updateStories\n} = charactersSlice.actions;\nexport default charactersSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/charactersSlice.js"],"names":["createSlice","axios","MARVEL_API","CHARACTERS_URL","COMICS_URL","STORIES_URL","MARVEL_API_KEY","getMoreCharacters","offset","dispatch","result","get","setOffset","data","count","addMoreCharacters","results","error","getMoreComics","id","setOffsetComics","updateComics","getMoreStories","setOffsetStories","updateStories","getDetailCharacter","updateDetailCharacters","charactersSlice","name","initialState","charactersList","charactersComics","charactersStories","charactersDetail","description","comics","available","stories","offset_comics","offset_stories","reducers","updateCharacters","state","action","payload","updateEmpty","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, CHARACTERS_URL, COMICS_URL, STORIES_URL, MARVEL_API_KEY } from '../utils/constants';\n\nexport const getMoreCharacters = (offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffset(result.data.data.count));\n        dispatch(addMoreCharacters(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getMoreComics = (id = null, offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'/'+id+COMICS_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffsetComics(result.data.data.count));\n        dispatch(updateComics(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getMoreStories = (id = null, offset = 0) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'/'+id+STORIES_URL+'?offset='+offset+'&apikey='+MARVEL_API_KEY);\n        dispatch(setOffsetStories(result.data.data.count));\n        dispatch(updateStories(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\nexport const getDetailCharacter = (id = null) => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+CHARACTERS_URL+'/'+id+'?apikey='+MARVEL_API_KEY);\n        dispatch(updateDetailCharacters(result.data.data.results[0]));\n    } catch (error) {\n        return false;\n    }\n}\n\nconst charactersSlice = createSlice({\n    name: 'characters',\n    initialState: {\n        charactersList: [],\n        charactersComics: [],\n        charactersStories: [],\n        charactersDetail: {\n            id: null,\n            name: null,\n            description: null,\n            comics: {\n                available: 0\n            },\n            stories: {\n                available: 0\n            }\n        },\n        offset: 0,\n        offset_comics: 0,\n        offset_stories: 0\n    },\n    reducers: {\n        updateCharacters(state, action) {\n            state.charactersList = action.payload;\n        },\n        updateDetailCharacters(state, action) {\n            state.charactersDetail = action.payload;\n        },\n        updateEmpty(state, action) {\n            state.offset_comics = 0;\n            state.charactersComics = [];\n        },\n        updateComics(state, action) {\n            state.charactersComics = [...state.charactersComics, ...action.payload];\n        },\n        updateStories(state, action) {\n            state.charactersStories = [...state.charactersStories, ...action.payload];\n        },\n        addMoreCharacters(state, action) {\n            state.charactersList = [...state.charactersList, ...action.payload];\n        },\n        setOffset(state, action) {\n            state.offset += action.payload;\n        },\n        setOffsetComics(state, action) {\n            state.offset_comics += action.payload;\n        },\n        setOffsetStories(state, action) {\n            state.offset_stories += action.payload;\n        },\n    },\n})\nexport const { updateCharacters, \n    setOffset, \n    setOffsetComics, \n    addMoreCharacters, \n    updateDetailCharacters, \n    updateComics, \n    updateEmpty,\n    updateStories\n} = charactersSlice.actions\nexport default charactersSlice.reducer"]},"metadata":{},"sourceType":"module"}