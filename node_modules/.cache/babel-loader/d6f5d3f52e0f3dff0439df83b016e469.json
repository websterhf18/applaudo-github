{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, COMICS_URL, MARVEL_API_KEY } from '../utils/constants';\nexport const getComics = () => async dispatch => {\n  try {\n    const result = await axios.get(MARVEL_API + COMICS_URL + '?apikey=' + MARVEL_API_KEY);\n    dispatch(updateComics(result.data.data.results));\n  } catch (error) {\n    return false;\n  }\n};\nconst comicsSlice = createSlice({\n  name: 'comics',\n  initialState: {\n    comicsList: []\n  },\n  reducers: {\n    updateComics(state, action) {\n      state.comicsList = action.payload;\n    }\n\n  }\n});\nexport const {\n  updateComics\n} = comicsSlice.actions;\nexport default comicsSlice.reducer;","map":{"version":3,"sources":["/Users/Mac/Desktop/applaudo-test/src/store/comicsSlice.js"],"names":["createSlice","axios","MARVEL_API","COMICS_URL","MARVEL_API_KEY","getComics","dispatch","result","get","updateComics","data","results","error","comicsSlice","name","initialState","comicsList","reducers","state","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,cAAjC,QAAuD,oBAAvD;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC/C,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAUN,UAAU,GAACC,UAAX,GAAsB,UAAtB,GAAiCC,cAA3C,CAArB;AACAE,IAAAA,QAAQ,CAACG,YAAY,CAACF,MAAM,CAACG,IAAP,CAAYA,IAAZ,CAAiBC,OAAlB,CAAb,CAAR;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CAPM;AASP,MAAMC,WAAW,GAAGb,WAAW,CAAC;AAC5Bc,EAAAA,IAAI,EAAE,QADsB;AAE5BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE;AADF,GAFc;AAK5BC,EAAAA,QAAQ,EAAE;AACNR,IAAAA,YAAY,CAACS,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACC,OAA1B;AACH;;AAHK;AALkB,CAAD,CAA/B;AAWA,OAAO,MAAM;AAAEX,EAAAA;AAAF,IAAmBI,WAAW,CAACQ,OAArC;AACP,eAAeR,WAAW,CAACS,OAA3B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { MARVEL_API, COMICS_URL, MARVEL_API_KEY } from '../utils/constants';\n\nexport const getComics = () => async (dispatch) => {\n    try {\n        const result = await axios.get(MARVEL_API+COMICS_URL+'?apikey='+MARVEL_API_KEY);\n        dispatch(updateComics(result.data.data.results));\n    } catch (error) {\n        return false;\n    }\n}\n\nconst comicsSlice = createSlice({\n    name: 'comics',\n    initialState: {\n        comicsList: [] \n    },\n    reducers: {\n        updateComics(state, action) {\n            state.comicsList = action.payload;\n        },\n    },\n})\nexport const { updateComics } = comicsSlice.actions\nexport default comicsSlice.reducer"]},"metadata":{},"sourceType":"module"}